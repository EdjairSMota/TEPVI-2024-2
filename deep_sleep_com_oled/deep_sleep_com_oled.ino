#include <esp_sleep.h>
#include <Wire.h>     
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

//OLED pins
#define OLED_SDA 4
#define OLED_SCL 15 
#define OLED_RST 16
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// 'marca_ufam_vetor_negativo', 128x64px
const unsigned char ufam_bitmap_marca_ufam_vetor_negativo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x90, 0x0b, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x10, 0x0b, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x7f, 0xfe, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xff, 0xff, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc7, 0xfd, 0xff, 0x9b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8f, 0xf8, 0x3f, 0xf3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3e, 0x18, 0x00, 0xf8, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x78, 0x08, 0x10, 0x38, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x60, 0x1f, 0x30, 0x1c, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0xe0, 0x3f, 0x3c, 0x0e, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0xc0, 0xff, 0xff, 0x07, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0xc1, 0xff, 0xff, 0x83, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x07, 0xff, 0xfd, 0xc1, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x0f, 0xff, 0xfb, 0xe1, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0f, 0x9f, 0xf7, 0xe0, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x1f, 0xf7, 0xef, 0xf0, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x1f, 0xff, 0xc7, 0xf0, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0x1b, 0xff, 0x07, 0x78, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x1e, 0xff, 0xef, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x3f, 0x9f, 0xff, 0xf8, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0x3f, 0xf7, 0xff, 0xf8, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x3f, 0xfb, 0xf6, 0xf8, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0xfb, 0xff, 0x78, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0xfb, 0xef, 0xf8, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x1f, 0xfb, 0xef, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x1f, 0xf7, 0xff, 0xf0, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x1f, 0xf7, 0xff, 0xf0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x0f, 0xff, 0xbf, 0xf0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0xff, 0xff, 0xe1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x07, 0xbf, 0xff, 0xc1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x83, 0xff, 0xff, 0x81, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x81, 0xfd, 0xff, 0x03, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0xc0, 0x7b, 0xfe, 0x07, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0xe0, 0x3f, 0xf8, 0x0e, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x70, 0x1f, 0xf8, 0x1c, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x3c, 0x0f, 0xf0, 0x7c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1e, 0x08, 0x1f, 0xf8, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8f, 0xf8, 0x1f, 0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xcf, 0xfb, 0xff, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xff, 0xff, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x3f, 0xf8, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x08, 0x02, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc8, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x11, 0xf8, 0x30, 0x78, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x11, 0x80, 0x78, 0x78, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x11, 0x80, 0x48, 0x68, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x11, 0x80, 0x88, 0x69, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x11, 0x80, 0x8c, 0x69, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x11, 0x80, 0xcc, 0x67, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x11, 0x81, 0x86, 0x66, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x31, 0x81, 0x02, 0x66, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x02, 0x22, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)
const int ufam_bitmap_allArray_LEN = 1;
const unsigned char* ufam_bitmap_allArray[1] = {
	ufam_bitmap_marca_ufam_vetor_negativo
};

// 'marca_ufam_vetor_negativo', 84x52px
const unsigned char ufam_logo_bitmap_marca_ufam_vetor_negativo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
	0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x09, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
	0x87, 0xfd, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1f, 0xff, 0x5e, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x7f, 0x0f, 0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x18, 0xe2, 0x00, 0x71, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x81, 0x00, 0x18, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x03, 0xcc, 0x0c, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x66, 0x07, 0xce, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x1f, 0xff, 0x82, 
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x3f, 0xfe, 0xc3, 0x30, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x88, 0x6f, 0xfd, 0xe1, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x7a, 0xfb, 
	0xe1, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb0, 0xff, 0x73, 0xd0, 0x98, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xb0, 0xff, 0x83, 0xb0, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31, 0xef, 
	0xf2, 0x70, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31, 0xf9, 0xfd, 0xf0, 0xc8, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x21, 0xfe, 0xfd, 0x30, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf1, 
	0xff, 0x7b, 0x38, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf1, 0xff, 0x7b, 0xf8, 0xf8, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xff, 0x7b, 0xf0, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
	0xb0, 0xfe, 0xf7, 0xf0, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x98, 0xfd, 0xef, 0xf1, 0xf8, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0xef, 0xe1, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xf8, 0x3b, 0xdf, 0xc1, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x17, 0xbf, 0x83, 
	0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0f, 0x7f, 0x06, 0x20, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x66, 0x03, 0xfe, 0x0e, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x81, 0xfc, 
	0x1c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0xc1, 0xf8, 0x38, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x18, 0xe1, 0x07, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x7e, 
	0x7f, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0f, 0xff, 0x8c, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x81, 0xf4, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xe1, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x01, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x08, 0x10, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x90, 0x0c, 0x31, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x14, 
	0x21, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x02, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x90, 0x22, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x3e, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x10, 0x41, 0x26, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x41, 0x20, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 592)
const int ufam_logo_bitmap_allArray_LEN = 1;
const unsigned char* ufam_logo_bitmap_allArray[1] = {
	ufam_logo_bitmap_marca_ufam_vetor_negativo
};

// 'WhatsApp Image 2023-06-10 at 13', 64x64px
const unsigned char logoLab_bitmap_WhatsApp_Image_2023_06_10_at_13 [] PROGMEM = {
	0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0x3f, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xc3, 0xff, 0xff, 
	0xff, 0xff, 0x0f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 
	0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 
	0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 
	0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 
	0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf9, 0xf0, 0x7f, 0xff, 0x00, 0x1f, 0x0f, 0x9f, 
	0xf9, 0xf0, 0x7f, 0xff, 0x00, 0x08, 0x03, 0x9f, 0xf3, 0xf0, 0x7f, 0xff, 0x00, 0x08, 0x03, 0xcf, 
	0xf3, 0xf0, 0x7f, 0xff, 0x00, 0x00, 0x03, 0xcf, 0xe7, 0xf0, 0x7f, 0xff, 0x00, 0x00, 0x03, 0xe7, 
	0xef, 0xf0, 0x7c, 0x0f, 0x00, 0x10, 0x33, 0xf7, 0xcf, 0xf0, 0x78, 0x03, 0xe0, 0xf0, 0x3f, 0xf3, 
	0xcf, 0xf0, 0x70, 0x03, 0xe0, 0xf0, 0x1f, 0xf3, 0xcf, 0xf0, 0x70, 0x01, 0xe0, 0xf0, 0x0f, 0xf3, 
	0x9f, 0xf0, 0x60, 0x01, 0xe0, 0xf8, 0x07, 0xf9, 0x9f, 0xf0, 0x60, 0x81, 0xe0, 0xf8, 0x03, 0xf9, 
	0x9f, 0xf0, 0x60, 0xc0, 0xe0, 0xfc, 0x01, 0xf9, 0x9f, 0xf0, 0x60, 0xc0, 0xe0, 0xfe, 0x01, 0xf9, 
	0x9f, 0xf0, 0x60, 0xc0, 0xe0, 0xff, 0x80, 0xf9, 0x9f, 0xf0, 0x60, 0x80, 0xe0, 0xfb, 0x80, 0xf9, 
	0x3f, 0xf0, 0x60, 0x01, 0xe0, 0xf0, 0x00, 0xfc, 0x3f, 0xf0, 0x60, 0x01, 0xe0, 0xf0, 0x01, 0xfc, 
	0xbf, 0xf0, 0x70, 0x03, 0xe0, 0xf0, 0x01, 0xfc, 0x3f, 0xf0, 0x70, 0x00, 0x00, 0xf0, 0x03, 0xfd, 
	0x9f, 0xf0, 0x70, 0x00, 0x00, 0x00, 0x07, 0xf9, 0x9f, 0xf0, 0x40, 0x1e, 0x00, 0x00, 0x1f, 0xf9, 
	0x9f, 0xf0, 0x07, 0x0f, 0xff, 0xff, 0xff, 0xf9, 0x9f, 0xf0, 0x1f, 0x0f, 0xff, 0xff, 0xff, 0xf9, 
	0x9f, 0xf0, 0x3f, 0x0f, 0xff, 0xff, 0xff, 0xf9, 0x9f, 0xf0, 0x7f, 0x07, 0xff, 0xff, 0xff, 0xf9, 
	0xcf, 0xf0, 0x87, 0xe3, 0xff, 0xff, 0xff, 0xf3, 0xcf, 0xf1, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf3, 
	0xcf, 0xe3, 0x20, 0x00, 0x1f, 0xff, 0xff, 0xf3, 0xef, 0xe7, 0x07, 0x00, 0x03, 0xff, 0xff, 0xf7, 
	0xe7, 0xe3, 0xdf, 0x07, 0xe0, 0xff, 0xff, 0xe7, 0xf3, 0xf0, 0xff, 0x1f, 0xfc, 0xff, 0xff, 0xcf, 
	0xf3, 0xf8, 0x7f, 0x1f, 0xf9, 0xff, 0xff, 0xcf, 0xf9, 0xfc, 0x3f, 0xff, 0xe3, 0xff, 0xff, 0x9f, 
	0xf9, 0xff, 0x03, 0xff, 0x07, 0xff, 0xff, 0x9f, 0xfc, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xff, 0x3f, 
	0xfc, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0xff, 0x3f, 0xfe, 0x7f, 0xff, 0x03, 0xff, 0xff, 0xfe, 0x7f, 
	0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 
	0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 
	0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 
	0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xf0, 0xff, 0xff, 
	0xff, 0xff, 0xc3, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xfc, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 528)
//logoLab_bitmap_WhatsApp_Image_2023_06_10_at_13
const int logoLab_bitmap_allArray_LEN = 1;
const unsigned char* logoLab_bitmap_allArray[1] = {
	logoLab_bitmap_WhatsApp_Image_2023_06_10_at_13
};

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RST);

#define TEMPO_SLEEP_SEC 10
#define TEMPO_US 1000000
RTC_DATA_ATTR int boots = 0;

void RTC_IRAM_ATTR esp_wake_deep_sleep() {
    esp_default_wake_deep_sleep();
    boots++;
}

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  Serial.print("Iniciando meu sleep de ...");
  Serial.println( (TEMPO_SLEEP_SEC * TEMPO_US ) );

  //inicializa oled
  Wire.begin(OLED_SDA, OLED_SCL);
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3c, true, false)) { // Address 0x3C for 128x32
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

  Serial.print("Iniciando meu OLED display com logo ...");
  display.clearDisplay();
  // Draw the bitmap
  display.drawBitmap(0, 0, logoLab_bitmap_WhatsApp_Image_2023_06_10_at_13, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
  // Display the image
  display.display();
  delay(5000);
}

void loop() {
  // put your main code here, to run repeatedly:
  //limpa antes de escrever
  display.clearDisplay();
  display.setTextColor(WHITE);
  
  int16_t x1, y1;
  uint16_t w, h;
  display.getTextBounds("Inicializacao LoRa OK!", 0, 0, &x1, &y1, &w, &h);
  int x = (SCREEN_WIDTH - w) / 2;
  int y = (SCREEN_HEIGHT - h) / 2;
  display.setCursor(x, y);

  Serial.println("Iniciando meu OLED display ...");
  display.print("Inicializacao LoRa OK!");
  display.setCursor(x, y+10);
  display.print("Vou dormir em 5s");
  display.display();

  delay(5000);

  Serial.print("Número de vezes que já acordei: ");
  Serial.println(boots);
  esp_deep_sleep(TEMPO_SLEEP_SEC * TEMPO_US);  //entra em sleep por 10s
}
